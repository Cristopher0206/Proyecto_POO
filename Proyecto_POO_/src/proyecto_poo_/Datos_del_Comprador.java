/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_poo_;

import java.awt.event.KeyEvent;
import java.util.ArrayList;

/**
 *
 * @author Pavilion
 */
public class Datos_del_Comprador extends javax.swing.JFrame {

    /**
     * Creates new form Datos_del_Comprador
     */
    ArrayList<Videojuego> listaJuegos = new ArrayList<>();

    public Datos_del_Comprador() {
        initComponents();
    }
       
    Factura factura = new Factura();
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTexto = new javax.swing.JLabel();
        lblNumFactura = new javax.swing.JLabel();
        lblNumCedula = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblApellidp = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblTipoConsola = new javax.swing.JLabel();
        lblComplemento = new javax.swing.JLabel();
        lblValorAPagar = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        lblNumeral = new javax.swing.JLabel();
        lblTexto1 = new javax.swing.JLabel();
        txtCédula = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        cmbDia = new javax.swing.JComboBox<>();
        cmbMes = new javax.swing.JComboBox<>();
        cmbAño = new javax.swing.JComboBox<>();
        cbmTipoComplemento = new javax.swing.JComboBox<>();
        txtValorAPagar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaResultados = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txtConsolaAdquirida = new javax.swing.JTextField();
        txtPrecioConsola = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTexto.setText("FACTURA DE COMPRA ");

        lblNumFactura.setText("Número de Factura:");

        lblNumCedula.setText("Número de Cédula:");

        lblNombre.setText("Nombre:");

        lblApellidp.setText("Apellido:");

        lblFecha.setText("Fecha:");

        lblTipoConsola.setText("Consola:");

        lblComplemento.setText("Complemento adquirido:");

        lblValorAPagar.setText("Valor a pagar:");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        lblNumeral.setText("######");

        lblTexto1.setText("DATOS (LLENAR)");

        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtApellidoKeyPressed(evt);
            }
        });

        cmbDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27. 28. 29", "30", "31" }));
        cmbDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDiaActionPerformed(evt);
            }
        });

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        cmbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesActionPerformed(evt);
            }
        });

        cmbAño.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020" }));
        cmbAño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAñoActionPerformed(evt);
            }
        });

        cbmTipoComplemento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Control", "Audífonos", "Fundas Protectoras" }));

        txaResultados.setEditable(false);
        txaResultados.setColumns(20);
        txaResultados.setRows(5);
        jScrollPane1.setViewportView(txaResultados);

        jLabel2.setText("DATOS DEL COMPRADOR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNumCedula)
                            .addComponent(lblNumFactura)
                            .addComponent(lblNombre)
                            .addComponent(lblApellidp)
                            .addComponent(lblFecha)
                            .addComponent(lblTipoConsola)
                            .addComponent(lblComplemento)
                            .addComponent(lblValorAPagar)
                            .addComponent(lblTexto))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(lblTexto1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(lblNumeral))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cmbAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtValorAPagar))
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCédula, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(cbmTipoComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtConsolaAdquirida, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPrecioConsola, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnGuardar)
                        .addGap(50, 50, 50)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTexto)
                    .addComponent(lblTexto1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumFactura)
                            .addComponent(lblNumeral, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumCedula)
                            .addComponent(txtCédula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombre)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblApellidp)
                            .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFecha)
                            .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTipoConsola)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtConsolaAdquirida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPrecioConsola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblComplemento)
                                    .addComponent(cbmTipoComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblValorAPagar)
                            .addComponent(txtValorAPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(btnGuardar)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDiaActionPerformed

    private void cmbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMesActionPerformed

    private void cmbAñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAñoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAñoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        String dia;
        String mes;
        String año;
        String tipoConsola;
        String complemento;
        ArrayList<String> consolas = new ArrayList();

        factura.setNumCedula(txtCédula.getText());
        factura.setNombre(txtNombre.getText());
        factura.setApellido(txtApellido.getText());
        dia = (String) cmbDia.getSelectedItem();
        mes = (String) cmbDia.getSelectedItem();
        año = (String) cmbAño.getSelectedItem();
        factura.setFecha(dia + "/" + mes + "/" + año);
        //tipoConsola = (String) cmbTipoConsola.getSelectedItem();
        complemento = (String) cbmTipoComplemento.getSelectedItem();
        factura.setComplemento(complemento);
        factura.setListaJuegos(listaJuegos);
        factura.setValorAPagar(Double.parseDouble(txtValorAPagar.getText()));
        txaResultados.append(factura.toString());
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtApellidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyPressed

        
// TODO add your handling code here:
if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        String nombre = "";
        double precio = 0;
        String exclusividad = "";
        if (Datos_juegos.cbxAnimalCrossing.isSelected()) {
            nombre = "Animal Crossing: New Horizons";
            precio = 55;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxAssassinsCreedOdyssey.isSelected()) {
            nombre = "Assassins Creed Odyssey";
            precio = 24;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxAssassinsCreedOrigins.isSelected()) {
            nombre = "Assassins Creed Origins";
            precio = 35;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxAssassinsCreedOdyssey.isSelected()) {
            nombre = "Assassins Creed Unity";
            precio = 20;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxBattlefield5.isSelected()) {
            nombre = "Battlefield V";
            precio = 27;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxBioshockInfinite.isSelected()) {
            nombre = "Bioshock Infinite";
            precio = 10;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxCodMW.isSelected()) {
            nombre = "Call of Duty: Modern Warfare";
            precio = 39;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxDaysGone.isSelected()) {
            nombre = "Days Gone";
            precio = 33;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxDeadByDaylight.isSelected()) {
            nombre = "Dead by Daylight";
            precio = 20;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxDragonBallFZ.isSelected()) {
            nombre = "Dragon Ball FighterZ";
            precio = 35;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxDragonBallX2.isSelected()) {
            nombre = "Dragon Ball Xenoverse 2";
            precio = 25;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxFallGuys.isSelected()) {
            nombre = "Fall Guys Ultimate Knockout";
            precio = 10;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxFIFA20.isSelected()) {
            nombre = "FIFA 20";
            precio = 35;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxForzaHorizon.isSelected()) {
            nombre = "Forza Horizon 4";
            precio = 75;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxForzaMotorsport.isSelected()) {
            nombre = "Forza Motorsport 7";
            precio = 25;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxFriday13.isSelected()) {
            nombre = "Friday the 13th: The Game";
            precio = 15;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxGears5.isSelected()) {
            nombre = "Gears 5";
            precio = 28;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxGearsOfWar4.isSelected()) {
            nombre = "Gears of War 4";
            precio = 15;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxGodOfWar.isSelected()) {
            nombre = "God of War";
            precio = 20;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxGranTurismo.isSelected()) {
            nombre = "Gran Turismo Sport";
            precio = 15;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxHalo5.isSelected()) {
            nombre = "HALO 5: Guardians";
            precio = 20;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxHorizonZeroDawn.isSelected()) {
            nombre = "Horizon Zero Dawn";
            precio = 20;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxInfamousSS.isSelected()) {
            nombre = "Infamous Second Son";
            precio = 15;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxMarioKart8.isSelected()) {
            nombre = "Mario Kart 8 Deluxe";
            precio = 45;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxMarvelAvengers.isSelected()) {
            nombre = "Marvel's Avengers";
            precio = 47;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxMUA3.isSelected()) {
            nombre = "Marvel Ultimate Alliance 3: The Black Order";
            precio = 35;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxSpiderMan.isSelected()) {
            nombre = "Marvel's Spider-Man";
            precio = 20;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxMinecraft.isSelected()) {
            nombre = "Minecraft";
            precio = 15;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxMortalKombat11.isSelected()) {
            nombre = "Mortal Kombat 11";
            precio = 35;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxNBA20.isSelected()) {
            nombre = "NBA 2K20";
            precio = 30;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxNBA21.isSelected()) {
            nombre = "NBA 2K21";
            precio = 43;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxOri.isSelected()) {
            nombre = "Ori and the Will of the Wisps";
            precio = 20;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxOverwatch.isSelected()) {
            nombre = "Overwatch";
            precio = 25;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxPES2020.isSelected()) {
            nombre = "PES 2020";
            precio = 18;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxPUBG.isSelected()) {
            nombre = "Player Unknown Battlegrounds";
            precio = 10;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxPokemon.isSelected()) {
            nombre = "Pokémon: Espada y Escudo";
            precio = 100;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxQuantumBreak.isSelected()) {
            nombre = "Quantum Break";
            precio = 26;
            exclusividad = "Sí";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxSeaOfTheThieves.isSelected()) {
            nombre = "Sea of Thieves";
            precio = 29;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoXboxOne(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxSuperMarioOdyssey.isSelected()) {
            nombre = "Super Mario Odyssey";
            precio = 50;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxSuperSmashBrosUltimate.isSelected()) {
            nombre = "Super Smash Bros Ultimate";
            precio = 50;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxTLOU2.isSelected()) {
            nombre = "The Last of Us Part 2";
            precio = 48;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxZeldaBW.isSelected()) {
            nombre = "The Legend of Zelda: Breath of the Wild";
            precio = 40;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxZeldaLA.isSelected()) {
            nombre = "The Legend of Zelda: Link's Awakening";
            precio = 40;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxRainbowSixSiege.isSelected()) {
            nombre = "Tom Clancy's Rainbow Six Siege";
            precio = 15;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxUntilDawn.isSelected()) {
            nombre = "Until Dawn";
            precio = 26;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoPS4(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxWatchDogsLegion.isSelected()) {
            nombre = "Watch Dogs: Legion";
            precio = 70;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxXenobladeChronicles.isSelected()) {
            nombre = "Xenoblade Chronicles: Definitive Edition";
            precio = 45;
            exclusividad = "Si";
            Videojuego nuevoJuego = new VideojuegoNintendoSwitch(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxAssassinsCreedOdyssey.isSelected()) {
            nombre = "Assassins Creed Odyssey";
            precio = 24;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxAssassinsCreedOdyssey.isSelected()) {
            nombre = "Assassins Creed Odyssey";
            precio = 24;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        if (Datos_juegos.cbxAssassinsCreedOdyssey.isSelected()) {
            nombre = "Assassins Creed Odyssey";
            precio = 24;
            exclusividad = "No";
            Videojuego nuevoJuego = new Videojuego(nombre, precio, exclusividad);
            if (nuevoJuego.esExclusivo()) {
                nuevoJuego.agregarDescuento();
            }
            listaJuegos.add(nuevoJuego);
        }
        double precioTotalJuegos = 0;
        double precioTotal=0;

        for (Videojuego objeto : listaJuegos) {
            precioTotalJuegos += objeto.getPrecio();
        }
        if (Gestion_Consolas.rbtNintendoSwitch.isSelected()) {
            txtConsolaAdquirida.setText(Gestion_Consolas.rbtNintendoSwitch.getText());
            txtPrecioConsola.setText((String) Gestion_Consolas.cmbPrecio.getSelectedItem());
            precioTotal= precioTotalJuegos + Double.valueOf(txtPrecioConsola.getText());
        }
        if (Gestion_Consolas.rbtPS4.isSelected()) {
            txtConsolaAdquirida.setText(Gestion_Consolas.rbtPS4.getText());
            txtPrecioConsola.setText((String) Gestion_Consolas.cmbPrecio.getSelectedItem());
             precioTotal= precioTotalJuegos + Double.valueOf(txtPrecioConsola.getText());
        }
        if (Gestion_Consolas.rbtXboxOne.isSelected()) {
            txtConsolaAdquirida.setText(Gestion_Consolas.rbtXboxOne.getText());
            txtPrecioConsola.setText((String) Gestion_Consolas.cmbPrecio.getSelectedItem());
            precioTotal= precioTotalJuegos + Double.valueOf(txtPrecioConsola.getText());
        }
        if (Gestion_Consolas.rbtNingunaConsola.isSelected()) {
            txtConsolaAdquirida.setEditable(false);
            txtPrecioConsola.setEditable(false);
            precioTotal= precioTotalJuegos + 0;
        }
        
        txtValorAPagar.setText(String.valueOf(precioTotal));
        
        if(listaJuegos.size()<5){
            cbmTipoComplemento.setEnabled(false);            
        } 
}

    }//GEN-LAST:event_txtApellidoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Datos_del_Comprador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Datos_del_Comprador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Datos_del_Comprador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Datos_del_Comprador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Datos_del_Comprador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cbmTipoComplemento;
    private javax.swing.JComboBox<String> cmbAño;
    private javax.swing.JComboBox<String> cmbDia;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApellidp;
    private javax.swing.JLabel lblComplemento;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNumCedula;
    private javax.swing.JLabel lblNumFactura;
    private javax.swing.JLabel lblNumeral;
    private javax.swing.JLabel lblTexto;
    private javax.swing.JLabel lblTexto1;
    private javax.swing.JLabel lblTipoConsola;
    private javax.swing.JLabel lblValorAPagar;
    private javax.swing.JTextArea txaResultados;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtConsolaAdquirida;
    private javax.swing.JTextField txtCédula;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecioConsola;
    private javax.swing.JTextField txtValorAPagar;
    // End of variables declaration//GEN-END:variables
}
